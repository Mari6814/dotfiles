set nocompatible
set t_Co=256
" Specify python3 executable for some extension?
let g:python3_host_prog = "/usr/bin/python3"
" Forces block cursor for some terminals that don't have it already
let &t_ti.="\e[1 q"
let &t_SI.="\e[5 q"
let &t_EI.="\e[1 q"
let &t_te.="\e[0 q"

call plug#begin('~/.vim/plugged')
Plug 'github/copilot.vim'
Plug 'junegunn/goyo.vim'
Plug 'airblade/vim-gitgutter'
Plug 'morhetz/gruvbox'
if has('nvim')
    Plug 'neovim/nvim-lspconfig'
    Plug 'hrsh7th/nvim-cmp'
    Plug 'hrsh7th/cmp-nvim-lsp'
    Plug 'hrsh7th/cmp-buffer'
    Plug 'nvim-lua/plenary.nvim'
    Plug 'nvim-telescope/telescope.nvim'
endif
call plug#end()

syntax on
filetype plugin on
filetype plugin indent on
colorscheme gruvbox
set cursorline
set number
set visualbell
set encoding=utf-8
set wrap
set formatoptions=tcqrn1
set tabstop=4
set shiftwidth=4
set expandtab
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
set listchars=trail:·,nbsp:⎵,eol:¬,tab:▸\ ,extends:>,precedes:<,nbsp:·
set list
set matchpairs+=<:>
set hidden
set wildmenu
set foldmethod=indent
set foldlevel=4
set wildignore+=**/node_modules/**,*.pyc,*.o,
set switchbuf=useopen,vsplit
set clipboard^=unnamed,unnamedplus
set completeopt=menu,menuone,noselect

" Shortcut to run terminal commands by using ! instead of :
nnoremap ! :!

" Naviagte windows in normal mode by holding ctrl
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
inoremap <C-j> <c-o><C-w>j
inoremap <C-k> <c-o><C-w>k
inoremap <C-h> <c-o><C-w>h
inoremap <C-l> <c-o><C-w>l
" Toggle folds using space
nnoremap <space> za
" Open nerd tree
nnoremap <leader>b :vs `pwd`<cr>

" Shortcut search for beginnig of word
nnoremap gw /\<
nnoremap gW ?\<

" Open :ls and enter :b to start typing searched buffer
nnoremap gb :ls<cr>:b<space>

" Close current buffer
nnoremap <leader>q :bwipe<cr>
" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" Replace word under cursor
nnoremap <leader>r :s/<C-r><C-w>//<left>
" Search and replace the word under the cursor
nnoremap <leader>R :%s/<C-r><C-w>//g<left><left>
" Search and replace the current visual selection
vnoremap <leader>v ygv:s/<c-r>"//<left>
" Search the pattern under the cursor in all files with the same extension as this one
nnoremap <F4> :execute ':vim /<C-r><C-w>/ **/*'<cr>
" Shortcut to replace word under cursor and enabling the . command
nmap g* *Ncgn

" Auto for session management
augroup sessions
    au!
    " Automatically save sessions on exit only in global dir
    au VimLeave * :mksession! ~/.vim/Session.vim
augroup end
" Open last global session that was saved
command Restore source ~/.vim/Session.vim

" Add syntax highlighting to zsh/bash and generic .aliases files
augroup aliases
    au!
    au BufReadPost .aliases set syntax=bash
    au BufReadPost .zsh_aliases set syntax=zsh
    au BufReadPost .bash_aliases set syntax=bash
augroup end

" Auto reload vimrc on save
augroup vimrc
    autocmd!
    autocmd FileType vim noremap <F1> :help <C-r><C-w><CR>
    autocmd BufWritePost,FileWritePost .vimrc :so $HOME/.vimrc
augroup end

" Only highlight search while in command line mode
augroup vimrc-incsearch-highlight
    autocmd!
    autocmd CmdlineEnter /,\? :set hlsearch
    autocmd CmdlineLeave /,\? :set nohlsearch
augroup END

" In the event, that a large file was loaded, set some options to reduce lag
augroup LargeFile
        let g:large_file = 2621440 " 2.5MB
        " Set options:
        "   eventignore+=FileType (no syntax highlighting etc
        "   assumes FileType always on)
        "   noswapfile (save copy of file)
        "   bufhidden=unload (save memory when other file is viewed)
        "   buftype=nowritefile (is read-only)
        "   undolevels=-1 (no undo possible)
        au BufReadPre *
                \ let f=expand("<afile>") |
                \ if getfsize(f) > g:large_file |
                        \ set eventignore+=FileType |
                        \ setlocal noswapfile bufhidden=unload buftype=nowrite undolevels=-1 |
                \ else |
                        \ set eventignore-=FileType |
                \ endif
augroup end

" Git-gutter shortcuts
nnoremap ]h <Plug>(GitGutterNextHunk)
nnoremap [h <Plug>(GitGutterPrevHunk)
nnoremap ghs <Plug>(GitGutterStageHunk)
nnoremap ghu <Plug>(GitGutterUndoHunk)
nnoremap ghp <Plug>(GitGutterPreviewHunk)
