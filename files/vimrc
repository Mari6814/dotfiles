set nocompatible
set t_Co=256

call plug#begin('~/.vim/plugged')
Plug 'junegunn/goyo.vim'
Plug 'airblade/vim-gitgutter'
Plug 'preservim/nerdtree'
Plug 'unblevable/quick-scope'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
if has('nvim')
    Plug 'neovim/nvim-lspconfig'
    Plug 'nvim-lua/plenary.nvim'
    Plug 'nvim-telescope/telescope.nvim'
    Plug 'hrsh7th/nvim-compe'
    Plug 'hrsh7th/vim-vsnip'
    Plug 'hrsh7th/vim-vsnip-integ'
endif
call plug#end()

inoremap <silent><expr> <C-Space> compe#complete()
inoremap <silent><expr> <CR>      compe#confirm('<CR>')
inoremap <silent><expr> <C-e>     compe#close('<C-e>')

syntax on
filetype plugin on
filetype plugin indent on
colorscheme slate
set relativenumber
set number
set visualbell
set ruler
set encoding=utf-8
set wrap
set textwidth=0
set formatoptions=tcqrn1
set tabstop=4
set shiftwidth=4
set expandtab
set showmode
set showcmd
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
set listchars=trail:·,nbsp:⎵,eol:¬,tab:▸\ ,extends:>,precedes:<
set list
set matchpairs+=<:>
set hidden
set wildmenu
set foldmethod=indent
set foldnestmax=10
set foldlevel=2
" Enable this option if pasting text into vim
set pastetoggle=<F2>
set ai
set wildignore+=**/node_modules/**,*.pyc,*.o,
set switchbuf=useopen,vsplit
filetyp plugin on

" Specify python3 executable for some extension?
let g:python3_host_prog = "/usr/bin/python3"

" Enable paste register crossplattform
set clipboard^=unnamed,unnamedplus

" Forces block cursor for some terminals that don't have it already
let &t_ti.="\e[1 q"
let &t_SI.="\e[5 q"
let &t_EI.="\e[1 q"
let &t_te.="\e[0 q"

" Naviagte windows in normal mode by holding ctrl
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
inoremap <C-j> <c-o><C-w>j
inoremap <C-k> <c-o><C-w>k
inoremap <C-h> <c-o><C-w>h
inoremap <C-l> <c-o><C-w>l

" Toggle folds using space
nnoremap <space> za
"
" Open nerd tree
nnoremap <leader>b :NERDTree<cr>

" Shortcut search for beginnig of word
nnoremap <leader>w /\<
nnoremap <leader>W ?\<

" Open :ls and enter :b to start typing searched buffer
nnoremap gb :ls<cr>:b<space>

" Goto any file using ctrl+p behaviour
nnoremap <c-p> :Telescope find_files<cr>

" Search string under cursor using Telescope
nnoremap <leader>f yiw:Telescope grep_string<cr><c-r>0

" Make this line an assignment statement macro
nnoremap =0 ^i<space>=<space><c-o>^<left>

" Auto for session management
augroup sessions
    au!
    " Automatically save sessions on exit in working dir
    au VimLeave * :mksession! .vim/Session.vim
    " Automatically save sessions on exit in global dir
    au VimLeave * :mksession! ~/.vim/Session.vim
augroup end

" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" Vertically split window for each buffer
command Vba vert ba

" Restore session using :Restore
command Restore source .vim/Session.vim

" Replace word under cursor
nnoremap <leader>r :s/<C-r><C-w>//<left>

" Search and replace the word under the cursor
nnoremap <leader>R :%s/<C-r><C-w>//g<left><left>

" Search and replace the current visual selection
vnoremap <leader>v ygv:s/<c-r>"//<left>

" Shortcut to replace word under cursor and enabling the . command
nmap g* *Ncgn

" Search the pattern under the cursor in all files with the same extension as this one
nnoremap <F4> :execute ':vim /<C-r><C-w>/ **/*'<cr>

" Auto reload vimrc on save
augroup vimrc
    autocmd!
    autocmd FileType vim noremap <F1> :help <C-r><C-w><CR>
    autocmd BufWritePost,FileWritePost .vimrc :so $HOME/.vimrc
augroup end

" Custom statusline section
function! StatuslineGit()
  let l:branchname = system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

augroup LargeFile
        let g:large_file = 2621440 " 2.5MB

        " Set options:
        "   eventignore+=FileType (no syntax highlighting etc
        "   assumes FileType always on)
        "   noswapfile (save copy of file)
        "   bufhidden=unload (save memory when other file is viewed)
        "   buftype=nowritefile (is read-only)
        "   undolevels=-1 (no undo possible)
        au BufReadPre *
                \ let f=expand("<afile>") |
                \ if getfsize(f) > g:large_file |
                        \ set eventignore+=FileType |
                        \ setlocal noswapfile bufhidden=unload buftype=nowrite undolevels=-1 |
                \ else |
                        \ set eventignore-=FileType |
                \ endif
augroup END

set statusline=
set statusline+=%#PmenuSel#
set statusline+=%{StatuslineGit()}
set statusline+=%#LineNr#
set statusline+=\ %f\ %m
set statusline+=\ "
set statusline+=%=
set statusline+=%#CursorColumn#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c
set statusline+=\ "
