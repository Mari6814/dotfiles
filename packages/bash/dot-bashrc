# ~/.bashrc: executed by bash(1) for non-login shells.
export SOURCED="$BASH_SOURCE@`date +%H%m%S`:$SOURCED"

export EDITOR=vim

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=20000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# CD by directly typing in the path to a directory
shopt -s autocd

# Expands symbolic representations of paths
shopt -s direxpand

# Adds the current git branch at the end of the prompt
[ -f "/etc/bash_completion.d/git-prompt" ] && source /etc/bash_completion.d/git-prompt && export PS1='\[\033[01;34m\]\w\[\033[00m\]$(__git_ps1 " %s")\$ '
[ -f "/usr/share/bash-completion/completions/git" ] && source /usr/share/bash-completion/completions/git

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Set up the user's "local" directory
export LOCAL="$HOME/.local"
[ -d "$LOCAL/bin" ] && export PATH="$PATH:$LOCAL/bin"

# Dynamically load bashrc plugins from the local directory
if [ -d "$LOCAL/bash-plugins" ]; then
    for plugin in "$LOCAL/bash-plugins/"*.sh; do
        if [ -f "$plugin" ]; then
            export BASH_PLUGINS_LOADED="$plugin:$BASH_PLUGINS_LOADED"
            source "$plugin"
        fi
    done
fi

if [ ! -z "${TMUX:-}" ]; then
    __autocomplete_from_tmux_pane_buffer() {
        if [ -z "$TMUX" ]; then
            echo "autocompletion from buffer only works inside a TMUX session." >&2
            return 1
        fi
        local prefix="${READLINE_LINE:0:$READLINE_POINT}"
        local suffix="${READLINE_LINE:$READLINE_POINT}"
        local query=`echo "$prefix" | awk '{print $NF}'`
        local selected=$(tmux capture-pane -p \
            | tr -cs '[:alnum:]_\.\-@\$\~/' '\n' \
            | awk '{ if (length($0) >= 3) print }' \
            | sed '$d' \
            | sort -u \
            | uniq -u \
            | fzf --track --select-1 --exit-0 --query "$query" --tmux
        )
        READLINE_LINE="${prefix%$query}$selected$suffix"
        READLINE_POINT=${#READLINE_LINE}
    }
    bind -x '"\C-g": __autocomplete_from_tmux_pane_buffer'
fi

[ -d "$HOME/.cargo/bin" ] && export PATH="$HOME/.cargo/bin:$PATH"

[ -x `which zoxide` ] && eval "$(zoxide init bash --cmd cd)"

[ -d "$HOME/.config/composer" ] && export PATH="$HOME/.config/composer/vendor/bin:$PATH"

[ -d "/opt/nvim-linux-x86_64/bin" ] && export PATH="/opt/nvim-linux-x86_64/bin:$PATH" && export EDITOR=nvim

[ -d "$LOCAL/fzf/bin" ] && export PATH="$LOCAL/fzf/bin:$PATH" && eval "$(fzf --bash)"
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

[ -f "$HOME/.bash_aliases" ] && source "$HOME/.bash_aliases"
. "$HOME/.cargo/env"
